{"version":3,"sources":["LoginBar.js","Recommender.js","App.js","serviceWorker.js","index.js"],"names":["LoginBar","props","useState","user","setUser","useEffect","Cookies","get","console","log","parseInt","Date","now","window","location","assign","queryString","stringify","refresh_token","query","access_token","fetch","then","res","json","data","JSON","display_name","Button","onClick","Recommender","App","items","setItems","search","searchArtists","searchTracks","selectedTrack","creds","setCreds","handleChange","ev","newCreds","target","type","name","checked","value","document","cookie","src","width","height","frameborder","allowtransparency","allow","history","replaceState","title","reload","Form","FormGroup","controlId","FormControl","placeholder","onChange","Check","label","types","push","q","join","artists","map","artist","href","external_urls","spotify","images","length","url","forEach","disabled","catch","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.145f82c3.chunk.js","sourcesContent":["import React, {useEffect, useState, Component} from 'react';\nimport {Form, FormGroup, FormControl, Row, Button} from 'react-bootstrap';\nimport queryString from 'query-string';\nimport Cookies from 'js-cookie'\n\nexport default function LoginBar(props) {\n   const [user, setUser] = useState(\"\");\n\n\n   // priority show name, refresh, show login button\n   useEffect(() => {\n      // never logged in, give user login button\n      if (!Cookies.get('expiry_date')) {\n         return;\n      }\n      else {\n         console.log(`exp=${parseInt(Cookies.get('expiry_date'))} now=${Date.now()}`)\n         console.log(`time remaining=${(parseInt(Cookies.get('expiry_date')) - Date.now()) / 1000}`)\n         \n         //expired access token, must refresh\n         if (parseInt(Cookies.get('expiry_date')) < Date.now()) {\n            console.log('refreshing bc expired token')\n            window.location.assign('http://localhost:3000/refresh?' + queryString.stringify({refresh_token: Cookies.get('refresh_token')}))\n         }\n         // active access token, get user info\n         let query = queryString.stringify({access_token: Cookies.get('access_token')})\n         fetch('http://localhost:3000/me?' + query)\n         .then(res => res.json())\n         .then(data => {\n            console.log(`accessing /me, result=${JSON.stringify(data, null, 2)}`)\n            setUser(data.display_name)\n         })\n      }\n      console.log(`access_token=${Cookies.get('access_token')}`)\n\n   }, [])\n\n   // if can't log in, show login button\n\n   return (\n      <div>\n         <Button onClick={() => window.location.assign('http://localhost:3000/login')}>login to access playlists</Button>\n         <Button onClick={() => window.location.assign('http://localhost:3000/refresh?' + queryString.stringify({refresh_token: Cookies.get('refresh_token')}))}>refresh token</Button>\n         {/* <Button onClick={() => fetch('http://localhost:3000/login').then(res => console.log(`test button res=${res}`))}>test</Button> */}\n         {user && <p>logged in as {user}</p>}\n      </div>\n   )\n}","import React, {useEffect, useState, Component} from 'react';\nimport {Form, FormGroup, FormControl, Row, Col, Button} from 'react-bootstrap';\nimport queryString from 'query-string';\n\nconst AttributeSetting = props => {\n\n}\n\nexport default function Recommender(props) {\n   const [recs, setRecs] = useState([]);\n\n   let seeds = {\n      seed_artists: [],\n      seed_genres: [],\n      seed_tracks: []\n   };\n   let filters = {};\n\n   let submit = () => {\n      fetch()\n   }\n\n   return (\n      <div>\n         <h1>--Recommender--</h1>\n      </div>\n   )\n}","import React, {useEffect, useState, Component} from 'react';\nimport {Form, FormGroup, FormControl, Row, Col, Button} from 'react-bootstrap';\nimport './App.css';\nimport LoginBar from './LoginBar'\nimport Recommender from './Recommender'\nimport queryString from 'query-string';\nimport Cookies from 'js-cookie'\n\nfunction App(props) {\n   const [items, setItems] = useState([])\n   const [creds, setCreds] = useState({\n      search: \"\",\n      searchArtists: false,\n      searchTracks: false,\n      selectedTrack: \"\"\n   });\n\n   useEffect(() => {\n      \n   }, [])\n\n   let handleChange = ev => {\n      const newCreds = {...creds};\n\n      switch(ev.target.type) {\n         case 'checkbox':\n            newCreds[ev.target.name] = ev.target.checked;\n            break;\n         default:\n            newCreds[ev.target.name] = ev.target.value;\n      }\n      setCreds(newCreds);\n\n      console.log(`changed ${ev.target.name} to \n       ${ev.target.type == '  ' ? ev.target.checked : ev.target.value}`)\n   \n   }\n\n   let search = () => {\n      let types = []\n      if (creds.searchArtists)\n         types.push('artist')\n      if (creds.searchTracks)\n         types.push('track')\n      let query = queryString.stringify({\n         q: creds.search,\n         type: types.join(',')\n      })\n\n      fetch('http://localhost:3000/search?' + query)\n      .then(res => res.json())\n      .then(data => {\n         console.log(JSON.stringify(data, null, 2))\n         setItems(data.artists.items.map(artist => \n         (<div>\n            <a href={artist.external_urls.spotify}>{artist.name}</a>\n            <div>\n               {artist.images.length && <img src={artist.images[2].url} width=\"200\" height=\"200\"/>}\n            </div>\n         </div>)\n         ))\n         \n         data.artists.items.forEach(artist => console.log(artist.images.length && artist.images[0].url))\n         console.log(\"called search\")\n      })\n   }\n\n   let getTop = () => {\n      fetch('http://localhost:3000/top')\n      .then(res => res.json())\n      .then(data => {\n         console.log('top')\n      })\n      .catch()\n   }\n   return (\n      <div>\n         <p>document.cookie={document.cookie}</p>\n         <p>time remaining={(parseInt(Cookies.get('expiry_date')) - Date.now()) / 1000}</p>\n         { creds.searchArtists ? <iframe src=\"https://open.spotify.com/embed/track/0MiZuvQDXtd9lGAxZa8Syi\" width=\"300\" height=\"80\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe> : \"\" }\n         <p>player</p>\n         <Button onClick={() => window.history.replaceState({}, document.title, '/test')}>test button</Button>\n         <Button onClick={() => window.location.reload()}>refresh page</Button>\n         <LoginBar></LoginBar>\n         <div>p</div>\n         <Form>\n            <FormGroup controlId=\"search\">\n               <FormControl placeholder=\"search spotify\" name=\"search\" onChange={handleChange}/>\n            </FormGroup>\n            <Form.Check name=\"searchArtists\" label=\"artists\" value={creds.searchArtists} onChange={handleChange}/>\n            <Form.Check name=\"searchTracks\" label=\"tracks\" value={creds.searchTracks} onChange={handleChange}/>\n         </Form>\n         <Button onClick={search} disabled={!creds.searchArtists && !creds.searchTracks}>search</Button>\n         <h2>search results {items.length ? `for: ${creds.search}` : \"\"}</h2>\n         <div>{items}</div>\n         <Recommender></Recommender>\n         <Button onClick={getTop}>top playlists</Button>\n\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}